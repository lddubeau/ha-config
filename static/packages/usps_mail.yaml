notify:
  - name: usps_mail_notify_group
    platform: group
    services:
      - service: living_room_tv
      - service: basement_tv
      - service: google_home

script:
  delete_usps_sensor_package:
    alias: "Delete a USPS Sensor Package."
    fields:
      tracking:
        description: The tracking number.
    variables:
      mqtt_topic: "package_USPS_{{ tracking }}" 
      state_topic: "packages/sensor/state/{{ mqtt_topic }}"
      attribute_topic: "packages/sensor/attributes/{{ mqtt_topic }}"
      config_topic: "ha/sensor/{{ mqtt_topic }}/config"
    sequence:
      - service: mqtt.publish
        data:
          retain: true
          payload: ""
        data_template:
          topic: "{{ state_topic }}"
      - service: mqtt.publish
        data:
          retain: true
          payload: ""
        data_template:
          topic: "{{ attribute_topic }}"
      - service: mqtt.publish
        data:
          retain: true
          payload: ""
        data_template:
          topic: "{{ config_topic }}"
          
automation:
  - alias: "Reset USPS Mail"
    mode: single
    trigger:
      platform: time
      at: "00:00:01"
    variables:
      usps: >-
        {{ states.sensor.packages_delivered.attributes.packages |
           selectattr("provider", "eq", "USPS") |
           map(attribute="tracking_number") |
           map("regex_replace", "^T", "") | list }}
      length: "{{ usps | length }}"
    action:
      - repeat:
          while: "{{ repeat.index <= length }}"
          sequence:
            - service: script.delete_usps_sensor_package
              data_template:
                tracking: >-
                  {{ states.sensor["package_USPS_" +
                     usps[repeat.index - 1]].state }}
  - alias: "USPS Mail Delivered"
    mode: queued
    trigger:
      platform: state
      entity_id: sensor.usps_mail_delivered
      to: "yes"
    variables:
      message: "USPS mail has been delivered."
    action:
      - service: notify.usps_mail_notify_group
        data:
          message: "{{ message }}"
      - service: persistent_notification.create
        data:
          message: "{{ message }}"
  - alias: "Generate USPS Package"
    mode: queued
    trigger:
      - platform: state
        entity_id: sensor.usps_email_notifications
      - platform: homeassistant
        event: start
    variables:
      subject: >-
        {% set subject =
           state_attr('sensor.usps_email_notifications', 'subject') %}
        {{ "unknown" if subject is none else subject }}
      tracking: >-
        {% set tr = subject | regex_findall_index("([0-9]{22})") %}
        {{ "unknown" if tr is none else tr }}
      name: "Package USPS {{ tracking }}"
      mqtt_topic: "package_USPS_{{ tracking }}" 
      state_topic: "packages/sensor/state/{{ mqtt_topic }}"
      attribute_topic: "packages/sensor/attributes/{{ mqtt_topic }}"
      config_topic: "ha/sensor/{{ mqtt_topic }}/config"
    condition: >-
      {{ not is_state('sensor.usps_email_notifications', 'unknown') }}
    action:
      - service: mqtt.publish
        data_template:
          topic: "{{ config_topic }}"
          retain: true
          payload: >-
            {{ {
              "name": name,
              "state_topic": state_topic,
              "json_attributes_topic": attribute_topic,
              "unit_of_measurement": "package",
            } | to_json }}
      - service: mqtt.publish
        data_template:
          topic: "{{ state_topic }}"
          retain: true
          payload: "{{ tracking }}"
      - service: mqtt.publish
        data_template:
          topic: "{{ attribute_topic }}"
          retain: true
          payload: >-
            {% set value = (subject |
               regex_findall_index("USPS(\(R\)|®)? (Item Delivered|Expected Delivery|Delivery Exception|Out for Delivery)"))[1]
               if not is_state("sensor.usps_email_notifications", "unknown")
               else "unknown" %}
            {% set right_now = now() %}
            {% set date_match = (value == "Expected Delivery") and
               (subject | regex_findall_index(
               "USPS(?:\(R\)|®) Expected Delivery(?: by | on | )?(?:.*?)"
               " (.*?) (.*?), (\d+)")) ==
              (right_now.strftime("%B"), "%d" % right_now.day, "%d" % right_now.year) %}
            {{ {
              "unit_of_measurement": "package",
              "provider": "USPS",
              "tracking_number": 'T%d' % (tracking),
              "subject": subject, 
              "status": "Delivered" if value == "Item Delivered"
                        else "Unknown" if value == "unknown"
                        else "Out for Delivery" if (value == "Out for Delivery") or
                                                   (value == "Expected Delivery" and date_match)
                        else "Transit",
              } | to_json }}

sensor:
  - platform: imap_email_content
    server: imap.gmail.com
    port: 993
    username: !secret homeassistant_email_user
    password: !secret homeassistant_email_password
    name: usps_email_notifications
    senders:
      - auto-reply@usps.com
      - ldd@lddubeau.com
  - platform: template
    sensors:
      usps_mail_delivered:
        friendly_name: USPS Mail Delivered
        value_template: >-
          {% set delivered = "USPS" in
             (states.sensor.packages_delivered.attributes.packages
              | map(attribute="provider")) %}
          {% set not_delivered = "USPS" in
             (states.sensor.packages_out_for_delivery.attributes.packages
              | map(attribute="provider")) %}
          {{ "yes" if delivered else
             "no" if not_delivered else "unknown" }}
      packages_in_transit:
        friendly_name: Packages In Transit
        value_template: >-
          {{ (state_attr('sensor.packages_in_transit', 'packages') or []) |
              length }}
        attribute_templates:
          packages: >-
            {% set l = namespace(found=[]) %}
            {% for key in states.sensor|map(attribute="entity_id")|list
               if key | regex_match("sensor.package_") and
                  state_attr(key, "status") == "Transit" %}
              {% set l.found = l.found + [dict(states[key].attributes)] %}
            {% endfor %}
            {{ l.found }}
      packages_out_for_delivery:
        friendly_name: Packages Out for Delivery
        value_template: >-
          {{ (state_attr('sensor.packages_out_for_delivery', 'packages') or []) |
              length }}
        attribute_templates:
          packages: >-
            {% set l = namespace(found=[]) %}
            {% for key in states.sensor|map(attribute="entity_id")|list
               if key | regex_match("sensor.package_") and
                  state_attr(key, "status") == "Out for Delivery" %}
              {% set l.found = l.found + [dict(states[key].attributes)] %}
            {% endfor %}
            {{ l.found }}
      packages_delivered:
        friendly_name: Packages Delivered
        value_template: >-
          {{ (state_attr('sensor.packages_delivered', 'packages') or []) |
              length }}
        attribute_templates:
          packages: >-
            {% set l = namespace(found=[]) %}
            {% for key in states.sensor|map(attribute="entity_id")|list
               if key | regex_match("sensor.package_") and
                  state_attr(key, "status") == "Delivered" %}
              {% set l.found = l.found + [dict(states[key].attributes)] %}
            {% endfor %}
            {{ l.found }}
